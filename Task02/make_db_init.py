#!/usr/bin/env python3

import csv
import os
import re
from datetime import datetime


ROOT_DIR = os.path.dirname(os.path.abspath(__file__))


def read_movies(path):
    rows = []
    with open(path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for r in reader:
            movie_id = int(r['movieId'])
            title_raw = r['title']
            genres = r['genres'] if r['genres'] is not None else ''
            # Extract year from parentheses at end e.g. "Toy Story (1995)"
            year = None
            m = re.search(r"\((\d{4})\)\s*$", title_raw)
            if m:
                year = int(m.group(1))
                title = title_raw[: m.start()].rstrip()
            else:
                title = title_raw
            rows.append((movie_id, title, year, genres))
    return rows


def read_ratings(path):
    rows = []
    with open(path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        idx = 1
        for r in reader:
            user_id = int(r['userId'])
            movie_id = int(r['movieId'])
            rating = float(r['rating'])
            ts = int(r['timestamp']) if r['timestamp'] else None
            rows.append((idx, user_id, movie_id, rating, ts))
            idx += 1
    return rows


def read_tags(path):
    rows = []
    with open(path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        idx = 1
        for r in reader:
            user_id = int(r['userId'])
            movie_id = int(r['movieId'])
            tag = r['tag'] if r['tag'] is not None else ''
            ts = int(r['timestamp']) if r['timestamp'] else None
            rows.append((idx, user_id, movie_id, tag, ts))
            idx += 1
    return rows


def read_users(path):
    rows = []
    with open(path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.rstrip('\n')
            if not line:
                continue
            parts = line.split('|')
            if len(parts) < 6:
                # Skip malformed rows
                continue
            user_id = int(parts[0])
            name = parts[1]
            email = parts[2]
            gender = parts[3]
            register_date = parts[4]
            occupation = parts[5]
            # Normalize date to YYYY-MM-DD text if possible
            try:
                dt = datetime.fromisoformat(register_date)
                register_date = dt.date().isoformat()
            except Exception:
                pass
            rows.append((user_id, name, email, gender, register_date, occupation))
    return rows


def sql_escape(value):
    if value is None:
        return 'NULL'
    if isinstance(value, (int, float)):
        return str(value)
    # Escape single quotes for TEXT
    return "'" + str(value).replace("'", "''") + "'"


def generate_sql(movies, ratings, tags, users):
    stmts = []
    stmts.append('-- Auto-generated by make_db_init.py')
    stmts.append('PRAGMA foreign_keys = OFF;')

    # Drop existing tables
    for table in ['movies', 'ratings', 'tags', 'users']:
        stmts.append(f'DROP TABLE IF EXISTS {table};')

    # Create tables
    stmts.append(
        'CREATE TABLE movies (\n'
        '  id INTEGER PRIMARY KEY,\n'
        '  title TEXT NOT NULL,\n'
        '  year INTEGER,\n'
        '  genres TEXT\n'
        ');'
    )
    stmts.append(
        'CREATE TABLE ratings (\n'
        '  id INTEGER PRIMARY KEY,\n'
        '  user_id INTEGER NOT NULL,\n'
        '  movie_id INTEGER NOT NULL,\n'
        '  rating REAL NOT NULL,\n'
        '  timestamp INTEGER\n'
        ');'
    )
    stmts.append(
        'CREATE TABLE tags (\n'
        '  id INTEGER PRIMARY KEY,\n'
        '  user_id INTEGER NOT NULL,\n'
        '  movie_id INTEGER NOT NULL,\n'
        '  tag TEXT NOT NULL,\n'
        '  timestamp INTEGER\n'
        ');'
    )
    stmts.append(
        'CREATE TABLE users (\n'
        '  id INTEGER PRIMARY KEY,\n'
        '  name TEXT NOT NULL,\n'
        '  email TEXT NOT NULL,\n'
        '  gender TEXT,\n'
        '  register_date TEXT,\n'
        '  occupation TEXT\n'
        ');'
    )

    # Insert data
    if movies:
        stmts.append('BEGIN;')
        for row in movies:
            movie_id, title, year, genres = row
            stmts.append(
                'INSERT INTO movies (id, title, year, genres) VALUES ('
                f"{sql_escape(movie_id)}, {sql_escape(title)}, {sql_escape(year)}, {sql_escape(genres)}" \
                ');'
            )
        stmts.append('COMMIT;')

    if ratings:
        stmts.append('BEGIN;')
        for r in ratings:
            rid, user_id, movie_id, rating, ts = r
            stmts.append(
                'INSERT INTO ratings (id, user_id, movie_id, rating, timestamp) VALUES ('
                f"{sql_escape(rid)}, {sql_escape(user_id)}, {sql_escape(movie_id)}, {sql_escape(rating)}, {sql_escape(ts)}" \
                ');'
            )
        stmts.append('COMMIT;')

    if tags:
        stmts.append('BEGIN;')
        for t in tags:
            tid, user_id, movie_id, tag, ts = t
            stmts.append(
                'INSERT INTO tags (id, user_id, movie_id, tag, timestamp) VALUES ('
                f"{sql_escape(tid)}, {sql_escape(user_id)}, {sql_escape(movie_id)}, {sql_escape(tag)}, {sql_escape(ts)}" \
                ');'
            )
        stmts.append('COMMIT;')

    if users:
        stmts.append('BEGIN;')
        for u in users:
            uid, name, email, gender, reg_date, occupation = u
            stmts.append(
                'INSERT INTO users (id, name, email, gender, register_date, occupation) VALUES ('
                f"{sql_escape(uid)}, {sql_escape(name)}, {sql_escape(email)}, {sql_escape(gender)}, {sql_escape(reg_date)}, {sql_escape(occupation)}" \
                ');'
            )
        stmts.append('COMMIT;')

    return '\n'.join(stmts) + '\n'


def main():
    movies_path = os.path.join(ROOT_DIR, 'movies.csv')
    ratings_path = os.path.join(ROOT_DIR, 'ratings.csv')
    tags_path = os.path.join(ROOT_DIR, 'tags.csv')
    users_path = os.path.join(ROOT_DIR, 'users.txt')

    movies = read_movies(movies_path)
    ratings = read_ratings(ratings_path)
    tags = read_tags(tags_path)
    users = read_users(users_path)

    sql = generate_sql(movies, ratings, tags, users)

    out_sql = os.path.join(ROOT_DIR, 'db_init.sql')
    with open(out_sql, 'w', encoding='utf-8', newline='') as f:
        f.write(sql)

    print(f'Generated {out_sql} with {len(movies)} movies, {len(ratings)} ratings, {len(tags)} tags, {len(users)} users.')


if __name__ == '__main__':
    main()


